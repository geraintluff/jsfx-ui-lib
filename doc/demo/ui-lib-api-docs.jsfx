desc: ui-lib.jsfx-inc - API documentation
import ui-lib.jsfx-inc

in_pin:none
out_pin:none
options:want_all_kb

@init
freemem = ui_setup(0);
api_buffer_length = 1024;
freemem = (api_buffer = freemem) + buffer_length;

@gfx 690 550
control_start("page", api_theme);

function api_print_function_signature(code) (
	ui_split_top(18);
		ui_font("Courier New", 16, 1, 0);
		ui_text(code);
	ui_pop();
);

ui_screen() == "options" ? (
	control_dialog("Display options", "done");

	ui_split_topratio(1);
		ui_push_height(100);
			control_group("theme");
			ui_push_heighttext(-1);
				ui_split_leftratio(1/3);
					control_button("default", api_theme != "default") ? api_theme = "default";
				ui_split_next();
					control_button("tron", api_theme != "tron") ? api_theme = "tron";
				ui_split_next();
					control_button("black", api_theme != "black") ? api_theme = "black";
				ui_pop();
			ui_pop();
		ui_pop();
	ui_pop();
) : ui_screen() == "page" ? (
	control_navbar("ui-lib.jsfx-inc", "options", "options");
	ui_pad();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("This is the API documentation for JSFX UI library. It is available as text, or as an interactive JSFX effect."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("Introduction") ? (
				ui_screen_open("page_0");
				page_0_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("Setup, screens and errors") ? (
				ui_screen_open("page_1");
				page_1_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("The viewport stack") ? (
				ui_screen_open("page_2");
				page_2_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("Drawing state") ? (
				ui_screen_open("page_3");
				page_3_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("Drawing") ? (
				ui_screen_open("page_4");
				page_4_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("Text") ? (
				ui_screen_open("page_5");
				page_5_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("User input") ? (
				ui_screen_open("page_6");
				page_6_setup = 0;
			);
		ui_pop();
	ui_pop();
) : ui_screen() == "page_0" ? (
	control_navbar("Introduction", "options", "options");
	ui_pad();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("You should read the getting-started tour first (see GitHub), which explains some important concepts such as the viewport stack.\n\nHowever, here are a few short examples so you know what you're dealing with:"));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("Hello World") ? (
				ui_screen_open("page_0_0");
				page_0_0_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("Viewport stack example") ? (
				ui_screen_open("page_0_1");
				page_0_1_setup = 0;
			);
		ui_pop();
	ui_pop();
) : ui_screen() == "page_0_0" ? (
	control_navbar("Hello World", "options", "options");
	ui_pad();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("Here's a simple Hello World example.\n\nWe import the library in the header, and in @init we allocate it some of the memory buffer. It returns the first unused memory slot. In @gfx, we always call ui_start() first, to reset the UI state.\n\nThen, we call ui_text() to draw some text to the screen."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_rightratio(0.5);
		ui_padleft();
		ui_text("Hello World");
	ui_pop();
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("desc:JSFX UI: Hello World\nimport ui-lib.jsfx-inc\n\n@init\nfreemem = ui_setup(0);\n\n@gfx\nui_start();\nui_text(\"Hello, world!\");");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_0_1" ? (
	control_navbar("Viewport stack example", "options", "options");
	ui_pad();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("The current \"viewport\" has position and size.  It also stores other bits of drawing state, such as colour and font properties.\n\nWe have a stack of viewports - to draw a certain section of the screen (or in a particular colour, or many things) we push a new viewport/drawing-state to this stack, and pop it off to return to our previous state when we are done."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_rightratio(0.5);
		ui_padleft();
		ui_border();
		ui_pad();
		
		ui_push_height(100);
			// new viewport has smaller height
			ui_color(192, 128, 0);
			ui_border();
			ui_pad();
		
			ui_split_left(80);
				ui_color(0, 215, 215);
				ui_fill();
			ui_pop();
		
			// remaining viewport is now smaller
			// because we used ui_split_left() above
			ui_color(215, 0, 215);
			ui_border();
			ui_text("some text");
		ui_pop();
	ui_pop();
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("ui_border();\nui_pad();\n\nui_push_height(100);\n\t// new viewport has smaller height\n\tui_color(192, 128, 0);\n\tui_border();\n\tui_pad();\n\n\tui_split_left(80);\n\t\tui_color(0, 215, 215);\n\t\tui_fill();\n\tui_pop();\n\n\t// remaining viewport is now smaller\n\t// because we used ui_split_left() above\n\tui_color(215, 0, 215);\n\tui_border();\n\tui_text(\"some text\");\nui_pop();");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_1" ? (
	control_navbar("Setup, screens and errors", "options", "options");
	ui_pad();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("These functions provide a framework for everything else in the library."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("ui_setup") ? (
				ui_screen_open("page_1_0");
				page_1_0_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("ui_start / control_start") ? (
				ui_screen_open("page_1_1");
				page_1_1_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("ui_screen") ? (
				ui_screen_open("page_1_2");
				page_1_2_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("ui_screen_open") ? (
				ui_screen_open("page_1_3");
				page_1_3_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("ui_screen_close") ? (
				ui_screen_open("page_1_4");
				page_1_4_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("ui_screen_level") ? (
				ui_screen_open("page_1_5");
				page_1_5_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("ui_screen_arg") ? (
				ui_screen_open("page_1_6");
				page_1_6_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("ui_system / control_system") ? (
				ui_screen_open("page_1_7");
				page_1_7_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("The \"control.prompt\" screen") ? (
				ui_screen_open("page_1_8");
				page_1_8_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("ui_reserve_image") ? (
				ui_screen_open("page_1_9");
				page_1_9_setup = 0;
			);
		ui_pop();
	ui_pop();
) : ui_screen() == "page_1_0" ? (
	control_navbar("ui_setup", "options", "options");
	ui_pad();
	api_print_function_signature("new_freemem = ui_setup(freemem=0);");
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("This method sets up a section of the memory buffer for use by the UI library.\n\nYou must call this in @init, before any other UI code."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("@init\n\n//Unused section of memory buffer\nfreemem = 0;\n\n// Returns end of allocated block (first unused index)\nfreemem = ui_setup(freemem);");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_1_1" ? (
	control_navbar("ui_start / control_start", "options", "options");
	ui_pad();
	api_print_function_signature("ui_start(default_screen);");
	api_print_function_signature("control_start(default_screen, theme);");
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("These methods resets the UI state for the start of each frame.  You must call one of these in @gfx, before any other UI code.\n\nThe default_screen variable is a screen identifier - see ui_screen().\n\ncontrol_start() has an additional \"theme\" parameter, which must be a string constant, one of: \"default\", \"tron\" or \"black\"."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("@gfx\n\nui_start(\"main\");\n\n//Or:\n@gfx\n\ncontrol_start(\"main\", \"tron\")");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_1_2" ? (
	control_navbar("ui_screen", "options", "options");
	ui_pad();
	api_print_function_signature("screen_id = ui_screen();");
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("This method returns the current screen ID, a unique identifier for that screen.  Use this to determine which screen you should draw.\n\nEven if you only have one screen, you should use this so that you can get error messages or other info using ui_system().\n\nThe screen ID is treated as a number, but the best screen IDs are string constants - all identical string constants are represented by the same number, and it makes your code more readable."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("@gfx\n\nui_start(\"main\");\n\nui_screen() == \"main\" ? (\n\t/* draw your main screen */\n) : ui_system();");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_1_3" ? (
	control_navbar("ui_screen_open", "options", "options");
	ui_pad();
	api_print_function_signature("ui_screen_open(screen_id);");
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("This method opens a new screen on top of the stack of screens.\n\nThe screen stack is limited to 10 layers deep."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("@gfx\n\nui_start(\"main\");\n\nui_screen() == \"main\" ? (\n\tcontrol_button(\"open screen\") ? (\n\t\tui_screen_open(\"secondary\");\n\t);\n) : ui_screen() == \"secondary\" ? (\n\t/* draw second screen */\n) : ui_system();");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_1_4" ? (
	control_navbar("ui_screen_close", "options", "options");
	ui_pad();
	api_print_function_signature("ui_screen_close();");
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("This function closes the current screen."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("@gfx\n\nui_start(\"main\");\n\nui_screen() == \"main\" ? (\n\tcontrol_button(\"open screen\") ? (\n\t\tui_screen_open(\"secondary\");\n\t);\n) : ui_screen() == \"secondary\" ? (\n\tcontrol_button(\"close screen\") ? (\n\t\tui_screen_close();\n\t);\n) : ui_system();");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_1_5" ? (
	control_navbar("ui_screen_level", "options", "options");
	ui_pad();
	api_print_function_signature("depth = ui_screen_level();");
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("This function tells you how many screens deep you are in your current stack.  The top level is 0."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_rightratio(0.5);
		ui_padleft();
		!page_1_5_setup ? (
			page_1_5_setup = 1;
		);
		depth = ui_screen_level();
	ui_pop();
	ui_split_bottom(44);
		ui_pad(-1, 0);
		ui_split_leftratio(0.4);
			ui_align(1, 0.5);
			ui_text("depth: ");
		ui_pop();
		
		ui_pad(0, -0.5);
		control_background_inset();
		ui_push();
			ui_padleft();
			ui_align(0, 0.5);
			ui_textnumber(depth, "%i");
		ui_pop();
		control_finish_inset();
	ui_pop();
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("depth = ui_screen_level();");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_1_6" ? (
	control_navbar("ui_screen_arg", "options", "options");
	ui_pad();
	api_print_function_signature("ui_screen_arg(index, value);");
	api_print_function_signature("value = ui_screen_arg(index);");
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("Sets or gets the screen argument at a given index.  If you pass in two arguments, it sets the value.  If you only pass in one, it returns the value.\n\nWhen setting values for a new screen, this must be called *after* ui_screen_open(), otherwise it will set the arguments for the current screen instead."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("// Read argument for current screen\nfoobar = ui_screen_arg(0);\n\n// Open new screen with argument\nshould_open_screen ? (\n\tui_screen_open(\"screen2\");\n\tui_screen_arg(0, foobar);\n);");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_1_7" ? (
	control_navbar("ui_system / control_system", "options", "options");
	ui_pad();
	api_print_function_signature("ui_system();");
	api_print_function_signature("control_system();");
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("These methods provide system screens.\n\nui_system() provides a basic error display (for unrecognised screen IDs, or errors due to incorrect use of the UI library), which is useful for developing and bugfixing.\n\ncontrol_system() provides an additional screen: \"control.prompt\", as well as a slightly prettier error screen."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("@gfx\n\nui_start(\"main\");\n\nui_screen() == \"main\" ? (\n\t/* draw your main screen */\n) : ui_system();");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_1_8" ? (
	control_navbar("The \"control.prompt\" screen", "options", "options");
	ui_pad();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("This is a screen ID provided by control_system().  It provides a convenient way to prompt the user for text entry.\n\nThe screen takes two arguments: a mutable string, and a title for the popup."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_rightratio(0.5);
		ui_padleft();
		!page_1_8_setup ? (
			strcpy(#entered_text, "text prompt result");
			page_1_8_setup = 1;
		);
		control_button("Open text prompt") ? (
			ui_screen_open("control.prompt");
			ui_screen_arg(0, #entered_text);
			ui_screen_arg(1, "Prompt title");
		);
	ui_pop();
	ui_split_bottom(44);
		ui_pad(-1, 0);
		ui_split_leftratio(0.4);
			ui_align(1, 0.5);
			ui_text("#entered_text: ");
		ui_pop();
		
		ui_pad(0, -0.5);
		control_background_inset();
		ui_push();
			ui_padleft();
			ui_align(0, 0.5);
			ui_text(#entered_text);
		ui_pop();
		control_finish_inset();
	ui_pop();
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("control_button(\"Open text prompt\") ? (\n\tui_screen_open(\"control.prompt\");\n\tui_screen_arg(0, #entered_text);\n\tui_screen_arg(1, \"Prompt title\");\n);");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_1_9" ? (
	control_navbar("ui_reserve_image", "options", "options");
	ui_pad();
	api_print_function_signature("ui_reserve_image(arg1);");
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("The UI library uses some of the offscreen buffers (0-127) for its own use.  If there are any buffers (or loaded images) that you are also using, you can notify the UI library so that it avoids them.\n\nThe UI library uses buffers from the end (127 downards), so they are unlikely to clash unless you are loading a large number of images or are using offscreen buffers yourself."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("@gfx\n\n// Draw something to buffer #95\ngfx_dest = 95;\ngfx_drawstr(\"foo\");\n\n// Avoid conflict\nui_reserve_image(95);\n\n// This resets gfx_dest, so we're fine\nui_start(\"main\");\n/* etc. */");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_2" ? (
	control_navbar("The viewport stack", "options", "options");
	ui_pad();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("Pushing, popping and splitting") ? (
				ui_screen_open("page_2_0");
				page_2_0_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("Get viewport position") ? (
				ui_screen_open("page_2_1");
				page_2_1_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("Set viewport position") ? (
				ui_screen_open("page_2_2");
				page_2_2_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("Padding") ? (
				ui_screen_open("page_2_3");
				page_2_3_setup = 0;
			);
		ui_pop();
	ui_pop();
) : ui_screen() == "page_2_0" ? (
	control_navbar("Pushing, popping and splitting", "options", "options");
	ui_pad();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("ui_push / ui_pop") ? (
				ui_screen_open("page_2_0_0");
				page_2_0_0_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("ui_push_clip") ? (
				ui_screen_open("page_2_0_1");
				page_2_0_1_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("Push with height/width") ? (
				ui_screen_open("page_2_0_2");
				page_2_0_2_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("Push above/below/left/right") ? (
				ui_screen_open("page_2_0_3");
				page_2_0_3_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("Splitting the viewport") ? (
				ui_screen_open("page_2_0_4");
				page_2_0_4_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("Splitting with ratios") ? (
				ui_screen_open("page_2_0_5");
				page_2_0_5_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("Splitting with text sizes") ? (
				ui_screen_open("page_2_0_6");
				page_2_0_6_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("ui_split_next") ? (
				ui_screen_open("page_2_0_7");
				page_2_0_7_setup = 0;
			);
		ui_pop();
	ui_pop();
) : ui_screen() == "page_2_0_0" ? (
	control_navbar("ui_push / ui_pop", "options", "options");
	ui_pad();
	api_print_function_signature("ui_push();");
	api_print_function_signature("ui_pop();");
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("ui_push() pushes a new viewport/state onto the stack.  The new state is a copy of the previous state, but changes to this new state do not affect the previous state.\n\nui_pop() removes the top later of the viewport/state stack."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_rightratio(0.5);
		ui_padleft();
		ui_push();
			// Indenting can help keep track of the stack
			ui_color(255, 0, 255);
		ui_pop();
		
		// Draws in default colour, because
		// we popped the altered one off
		ui_text("some text");
	ui_pop();
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("ui_push();\n\t// Indenting can help keep track of the stack\n\tui_color(255, 0, 255);\nui_pop();\n\n// Draws in default colour, because\n// we popped the altered one off\nui_text(\"some text\");");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_2_0_1" ? (
	control_navbar("ui_push_clip", "options", "options");
	ui_pad();
	api_print_function_signature("ui_push_clip(opacity=1);");
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("ui_push_clip() behaves a lot like ui_push(), except all changes are clipped to the current viewport, and have a global opacity applied.  If opacity is zero (or omitted), it is taken to be 1.\n\nInternally, this is implemented by copying the current screen state to a new buffer, drawing as normal (to that buffer, using gfx_dest), and then copying back with the appropriate opacity on the matching ui_pop() call."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_rightratio(0.5);
		ui_padleft();
		!page_2_0_1_setup ? (
			opacity = 1;
			page_2_0_1_setup = 1;
		);
		ui_push_clip(opacity);
			// Draw circles across the whole screen
			ui_color(0, 255, 0);
			gfx_y = 0;
			while (gfx_y < gfx_h + 30) (
				gfx_x = (gfx_y*0.5)%35;
				while (gfx_x < gfx_w + 30) (
					gfx_circle(gfx_x, gfx_y, 15, 1);
					gfx_x += 35;
				);
				gfx_y += 30;
			);
		ui_pop();
	ui_pop();
	ui_split_bottom(74);
		control_group("parameters");
		ui_split_topratio(1/1);
			ui_pad(0, -0.5);
			ui_split_leftratio(0.4);
				ui_align(1, 0.5);
				ui_text("opacity: ");
			ui_pop();
			ui_split_right(60);
				ui_align(0, 0.5);
				ui_textnumber(opacity, "%f");
			ui_pop();
			ui_padright();
			opacity = control_hslider(opacity, 0, 1, 0);
			ui_click() && ui_clickcount() == 2 ? opacity = 1;
		ui_pop();
	ui_pop();
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("ui_push_clip(opacity);\n\t// Draw circles across the whole screen\n\tui_color(0, 255, 0);\n\tgfx_y = 0;\n\twhile (gfx_y < gfx_h + 30) (\n\t\tgfx_x = (gfx_y*0.5)%35;\n\t\twhile (gfx_x < gfx_w + 30) (\n\t\t\tgfx_circle(gfx_x, gfx_y, 15, 1);\n\t\t\tgfx_x += 35;\n\t\t);\n\t\tgfx_y += 30;\n\t);\nui_pop();");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_2_0_2" ? (
	control_navbar("Push with height/width", "options", "options");
	ui_pad();
	ui_split_top(54);
		ui_split_leftratio(0.5);
			api_print_function_signature("ui_push_height(height);");
			api_print_function_signature("ui_push_heightratio(ratio);");
			api_print_function_signature("ui_push_heighttext(#text);");
		ui_split_next();
			api_print_function_signature("ui_push_width(width);");
			api_print_function_signature("ui_push_widthratio(ratio);");
			api_print_function_signature("ui_push_widthtext(#text);");
		ui_pop();
	ui_pop();
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("These methods let you push a new viewport to the stack, with a specified height/width.  Their position is determined by the current alignment."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_rightratio(0.5);
		ui_padleft();
		!page_2_0_2_setup ? (
			page_2_0_2_setup = 1;
		);
		ui_align(0.5, vertical_align);
		
		ui_push_height(height);
			ui_border();
			ui_align(0.5, 0.5);
			ui_text("viewport has fixed height");
		ui_pop();
	ui_pop();
	ui_split_bottom(118);
		control_group("parameters");
		ui_split_topratio(1/2);
			ui_pad(0, -0.5);
			ui_split_leftratio(0.4);
				ui_align(1, 0.5);
				ui_text("height: ");
			ui_pop();
			ui_split_right(60);
				ui_align(0, 0.5);
				ui_textnumber(height, "%i");
			ui_pop();
			ui_padright();
			height = control_hslider(height, 0, 150, 0);
			height = floor(height + 0.5);
		ui_split_next();
			ui_pad(0, -0.5);
			ui_split_leftratio(0.4);
				ui_align(1, 0.5);
				ui_text("vertical_align: ");
			ui_pop();
			ui_split_right(60);
				ui_align(0, 0.5);
				ui_textnumber(vertical_align, "%f");
			ui_pop();
			ui_padright();
			vertical_align = control_hslider(vertical_align, 0, 1, 0);
		ui_pop();
	ui_pop();
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("ui_align(0.5, vertical_align);\n\nui_push_height(height);\n\tui_border();\n\tui_align(0.5, 0.5);\n\tui_text(\"viewport has fixed height\");\nui_pop();");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_2_0_3" ? (
	control_navbar("Push above/below/left/right", "options", "options");
	ui_pad();
	ui_split_top(108);
		ui_split_leftratio(0.5);
			api_print_function_signature("ui_push_above(height);");
			api_print_function_signature("ui_push_aboveratio(ratio);");
			api_print_function_signature("ui_push_abovetext(#text);");
			api_print_function_signature("ui_push_below(height);");
			api_print_function_signature("ui_push_belowratio(ratio);");
			api_print_function_signature("ui_push_belowtext(#text);");
		ui_split_next();
			api_print_function_signature("ui_push_leftof(width);");
			api_print_function_signature("ui_push_leftofratio(ratio);");
			api_print_function_signature("ui_push_leftoftext(#text);");
			api_print_function_signature("ui_push_rightof(width);");
			api_print_function_signature("ui_push_rightofratio(ratio);");
			api_print_function_signature("ui_push_rightoftext(#text);");
		ui_pop();
	ui_pop();
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("These methods let you push a new viewport to the stack, fitting around the viewport that would be produced by ui_push_height() or ui_push_width()."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_rightratio(0.5);
		ui_padleft();
		!page_2_0_3_setup ? (
			page_2_0_3_setup = 1;
		);
		ui_align(0.5, vertical_align);
		
		ui_push_height(height);
			ui_border();
			ui_align(0.5, 0.5);
			ui_text("viewport has fixed height");
		ui_pop();
		
		ui_push_above(height);
			ui_color(0, 128, 255);
		ui_border();
		ui_align(0.5, 0.5);
			ui_text("centered above");
		ui_pop();
	ui_pop();
	ui_split_bottom(118);
		control_group("parameters");
		ui_split_topratio(1/2);
			ui_pad(0, -0.5);
			ui_split_leftratio(0.4);
				ui_align(1, 0.5);
				ui_text("height: ");
			ui_pop();
			ui_split_right(60);
				ui_align(0, 0.5);
				ui_textnumber(height, "%i");
			ui_pop();
			ui_padright();
			height = control_hslider(height, 0, 150, 0);
			height = floor(height + 0.5);
		ui_split_next();
			ui_pad(0, -0.5);
			ui_split_leftratio(0.4);
				ui_align(1, 0.5);
				ui_text("vertical_align: ");
			ui_pop();
			ui_split_right(60);
				ui_align(0, 0.5);
				ui_textnumber(vertical_align, "%f");
			ui_pop();
			ui_padright();
			vertical_align = control_hslider(vertical_align, 0, 1, 0);
		ui_pop();
	ui_pop();
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("ui_align(0.5, vertical_align);\n\nui_push_height(height);\n\tui_border();\n\tui_align(0.5, 0.5);\n\tui_text(\"viewport has fixed height\");\nui_pop();\n\nui_push_above(height);\n\tui_color(0, 128, 255);\nui_border();\nui_align(0.5, 0.5);\n\tui_text(\"centered above\");\nui_pop();");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_2_0_4" ? (
	control_navbar("Splitting the viewport", "options", "options");
	ui_pad();
	api_print_function_signature("ui_split_top(height);");
	api_print_function_signature("ui_split_bottom(height);");
	api_print_function_signature("ui_split_left(width);");
	api_print_function_signature("ui_split_right(width);");
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("The ui_split_*() functions push a new viewport/state onto the stack, anchored to one edge. Simultaneously, they shrink the previous viewport by the same amount, so that the two do not overlap.\n\nThis gives an easy way to carve out sections of the screen to place elements, and then guarantee that other elements will not overlap with them later."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_rightratio(0.5);
		ui_padleft();
		!page_2_0_4_setup ? (
			height = 80;
			page_2_0_4_setup = 1;
		);
		ui_split_top(height);
			ui_color(0, 192, 255);
			ui_border();
			ui_text("split viewport");
		ui_pop();
		
		// Now reduced so they don't overlap
		ui_color(215, 0, 215);
		ui_border();
		ui_text("remaining viewport");
	ui_pop();
	ui_split_bottom(74);
		control_group("parameters");
		ui_split_topratio(1/1);
			ui_pad(0, -0.5);
			ui_split_leftratio(0.4);
				ui_align(1, 0.5);
				ui_text("height: ");
			ui_pop();
			ui_split_right(60);
				ui_align(0, 0.5);
				ui_textnumber(height, "%i");
			ui_pop();
			ui_padright();
			height = control_hslider(height, 0, 200, 0);
			height = floor(height + 0.5);
			ui_click() && ui_clickcount() == 2 ? height = 80;
		ui_pop();
	ui_pop();
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("ui_split_top(height);\n\tui_color(0, 192, 255);\n\tui_border();\n\tui_text(\"split viewport\");\nui_pop();\n\n// Now reduced so they don't overlap\nui_color(215, 0, 215);\nui_border();\nui_text(\"remaining viewport\");");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_2_0_5" ? (
	control_navbar("Splitting with ratios", "options", "options");
	ui_pad();
	api_print_function_signature("ui_split_topratio(ratio);");
	api_print_function_signature("ui_split_bottomratio(ratio);");
	api_print_function_signature("ui_split_leftratio(ratio);");
	api_print_function_signature("ui_split_rightratio(ratio);");
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("The ui_split_*ratio() functions work exactly like the ui_split_*() functions, but with the split point specified as a ratio of the height/width."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_rightratio(0.5);
		ui_padleft();
		!page_2_0_5_setup ? (
			ratio = 0.3;
			page_2_0_5_setup = 1;
		);
		ui_split_topratio(ratio);
			ui_color(0, 192, 255);
			ui_border();
			ui_text("split viewport");
		ui_pop();
		
		// Now reduced so they don't overlap
		ui_color(215, 0, 215);
		ui_border();
		ui_text("remaining viewport");
	ui_pop();
	ui_split_bottom(74);
		control_group("parameters");
		ui_split_topratio(1/1);
			ui_pad(0, -0.5);
			ui_split_leftratio(0.4);
				ui_align(1, 0.5);
				ui_text("ratio: ");
			ui_pop();
			ui_split_right(60);
				ui_align(0, 0.5);
				ui_textnumber(ratio, "%f");
			ui_pop();
			ui_padright();
			ratio = control_hslider(ratio, 0, 1, 0);
			ui_click() && ui_clickcount() == 2 ? ratio = 0.3;
		ui_pop();
	ui_pop();
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("ui_split_topratio(ratio);\n\tui_color(0, 192, 255);\n\tui_border();\n\tui_text(\"split viewport\");\nui_pop();\n\n// Now reduced so they don't overlap\nui_color(215, 0, 215);\nui_border();\nui_text(\"remaining viewport\");");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_2_0_6" ? (
	control_navbar("Splitting with text sizes", "options", "options");
	ui_pad();
	api_print_function_signature("ui_split_toptext(#text);");
	api_print_function_signature("ui_split_bottomtext(#text);");
	api_print_function_signature("ui_split_left(#text);");
	api_print_function_signature("ui_split_right(#text);");
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("The ui_split_*ratio() functions work like the ui_split_*() functions, but the split point is determined by the height/width of a text string, plus some appropriate padding (from ui_padding() and related functions).\n\nIf you supply a negative number, it is equivalent to the empty string (which still has non-zero height)."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_rightratio(0.5);
		ui_padleft();
		!page_2_0_6_setup ? (
			strcpy(#text, "splitting text");
			page_2_0_6_setup = 1;
		);
		ui_split_lefttext(#text);
			ui_color(0, 192, 255);
			ui_border();
			// Viewport fits the text neatly
			ui_text(#text);
		ui_pop();
		
		ui_color(215, 0, 215);
		ui_border();
		ui_text("remaining viewport");
	ui_pop();
	ui_split_bottom(74);
		control_group("parameters");
		ui_split_topratio(1/1);
			ui_pad(0, -0.5);
			ui_split_leftratio(0.4);
				ui_align(1, 0.5);
				ui_text("#text: ");
			ui_pop();
			page_2_0_6_param0_state = control_textinput(#text, page_2_0_6_param0_state);
		ui_pop();
	ui_pop();
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("ui_split_lefttext(#text);\n\tui_color(0, 192, 255);\n\tui_border();\n\t// Viewport fits the text neatly\n\tui_text(#text);\nui_pop();\n\nui_color(215, 0, 215);\nui_border();\nui_text(\"remaining viewport\");");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_2_0_7" ? (
	control_navbar("ui_split_next", "options", "options");
	ui_pad();
	api_print_function_signature("ui_split_next();");
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("When you have performed a split using any of the ui_split_*() methods, you can use ui_split_next() to pop the viewport/state from the stack, and then re-split using the same height/width.\n\nThis lets you very easily subdivide into equal-sized pieces, or stack items up from one edge."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_rightratio(0.5);
		ui_padleft();
		ui_split_topratio(1/4);
			ui_color(255, 0, 0);
			ui_border();
			ui_text("first section");
		ui_split_next();
			ui_color(128, 128, 0);
			ui_border();
			ui_text("second section");
		ui_split_next();
			ui_color(0, 255, 0);
			ui_border();
			ui_text("third section");
		ui_split_next();
			ui_color(0, 128, 255);
			ui_border();
			ui_text("fourth section");
		ui_pop();
	ui_pop();
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("ui_split_topratio(1/4);\n\tui_color(255, 0, 0);\n\tui_border();\n\tui_text(\"first section\");\nui_split_next();\n\tui_color(128, 128, 0);\n\tui_border();\n\tui_text(\"second section\");\nui_split_next();\n\tui_color(0, 255, 0);\n\tui_border();\n\tui_text(\"third section\");\nui_split_next();\n\tui_color(0, 128, 255);\n\tui_border();\n\tui_text(\"fourth section\");\nui_pop();");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_2_1" ? (
	control_navbar("Get viewport position", "options", "options");
	ui_pad();
	ui_split_top(54);
		ui_split_leftratio(0.5);
			api_print_function_signature("left_x = ui_left();");
			api_print_function_signature("right_x = ui_right();");
			api_print_function_signature("top_y = ui_top();");
		ui_split_next();
			api_print_function_signature("bottom_y = ui_bottom();");
			api_print_function_signature("width_x = ui_width();");
			api_print_function_signature("height_y = ui_height();");
		ui_pop();
	ui_pop();
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("These return the boundaries and dimensions of the current viewport.\n\nMuch like gfx_w and gfx_h, the right/bottom edges are the first pixels that are *not* included in the viewport."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_rightratio(0.5);
		ui_padleft();
		ui_align(0, 0.5);
		ui_textnumber(ui_left(), "%i");
		
		ui_align(1, 0.5);
		ui_textnumber(ui_right(), "%i");
		
		ui_align(0.5, 0);
		ui_textnumber(ui_top(), "%i");
		
		ui_align(0.5, 1);
		ui_textnumber(ui_bottom(), "%i");
		
		sprintf(#size, "%i x %i", ui_width(), ui_height());
		ui_align(0.5, 0.5);
		ui_text(#size);
		
		ui_border();
	ui_pop();
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("ui_align(0, 0.5);\nui_textnumber(ui_left(), \"%i\");\n\nui_align(1, 0.5);\nui_textnumber(ui_right(), \"%i\");\n\nui_align(0.5, 0);\nui_textnumber(ui_top(), \"%i\");\n\nui_align(0.5, 1);\nui_textnumber(ui_bottom(), \"%i\");\n\nsprintf(#size, \"%i x %i\", ui_width(), ui_height());\nui_align(0.5, 0.5);\nui_text(#size);\n\nui_border();");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_2_2" ? (
	control_navbar("Set viewport position", "options", "options");
	ui_pad();
	api_print_function_signature("ui_set_rect(left, top, width, height);");
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("This explicitly sets the position and dimensions of the current viewport."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_rightratio(0.5);
		ui_padleft();
		!page_2_2_setup ? (
			left = ui_left() + ui_width()*0.25;
			top = ui_top() + ui_height()*0.25;
			width = ui_width()*0.5;
			height = ui_height()*0.5;
			page_2_2_setup = 1;
		);
		ui_set_rect(left, top, width, height);
		
		ui_color(255, 0, 255, 0.5);
		ui_fill();
	ui_pop();
	ui_split_bottom(206);
		control_group("parameters");
		ui_split_topratio(1/4);
			ui_pad(0, -0.5);
			ui_split_leftratio(0.4);
				ui_align(1, 0.5);
				ui_text("left: ");
			ui_pop();
			ui_split_right(60);
				ui_align(0, 0.5);
				ui_textnumber(left, "%i");
			ui_pop();
			ui_padright();
			left = control_hslider(left, 0, gfx_w, 0);
			left = floor(left + 0.5);
		ui_split_next();
			ui_pad(0, -0.5);
			ui_split_leftratio(0.4);
				ui_align(1, 0.5);
				ui_text("top: ");
			ui_pop();
			ui_split_right(60);
				ui_align(0, 0.5);
				ui_textnumber(top, "%i");
			ui_pop();
			ui_padright();
			top = control_hslider(top, 0, gfx_h, 0);
			top = floor(top + 0.5);
		ui_split_next();
			ui_pad(0, -0.5);
			ui_split_leftratio(0.4);
				ui_align(1, 0.5);
				ui_text("width: ");
			ui_pop();
			ui_split_right(60);
				ui_align(0, 0.5);
				ui_textnumber(width, "%i");
			ui_pop();
			ui_padright();
			width = control_hslider(width, 0, gfx_w, 0);
			width = floor(width + 0.5);
		ui_split_next();
			ui_pad(0, -0.5);
			ui_split_leftratio(0.4);
				ui_align(1, 0.5);
				ui_text("height: ");
			ui_pop();
			ui_split_right(60);
				ui_align(0, 0.5);
				ui_textnumber(height, "%i");
			ui_pop();
			ui_padright();
			height = control_hslider(height, 0, gfx_h, 0);
			height = floor(height + 0.5);
		ui_pop();
	ui_pop();
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("ui_set_rect(left, top, width, height);\n\nui_color(255, 0, 255, 0.5);\nui_fill();");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_2_3" ? (
	control_navbar("Padding", "options", "options");
	ui_pad();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("A few of the UI operations involve a default amount of padding.  For example, the ui_split_*text() add padding to the text measurements to determine the split size.\n\nThis padding size is part of the viewport/drawing state, and is dealt with by these functions."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("ui_pad") ? (
				ui_screen_open("page_2_3_0");
				page_2_3_0_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("Single-edge padding") ? (
				ui_screen_open("page_2_3_1");
				page_2_3_1_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("Setting/getting the padding") ? (
				ui_screen_open("page_2_3_2");
				page_2_3_2_setup = 0;
			);
		ui_pop();
	ui_pop();
) : ui_screen() == "page_2_3_0" ? (
	control_navbar("ui_pad", "options", "options");
	ui_pad();
	api_print_function_signature("ui_pad(left, top, right, bottom);");
	api_print_function_signature("ui_pad(leftAndRight, topAndBottom);");
	api_print_function_signature("ui_pad();");
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("This function shrinks the current viewport by the specified amount.\n\nWhen the padding size is omitted (in ui_pad() or in the side-specific variations), it uses a default padding size.  This is the sa"));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_rightratio(0.5);
		ui_padleft();
		!page_2_3_0_setup ? (
			left = 10;
			top = 10;
			right = 10;
			bottom = 10;
			page_2_3_0_setup = 1;
		);
		ui_border();
		
		ui_pad(left, top, right, bottom);
		
		ui_border();
	ui_pop();
	ui_split_bottom(206);
		control_group("parameters");
		ui_split_topratio(1/4);
			ui_pad(0, -0.5);
			ui_split_leftratio(0.4);
				ui_align(1, 0.5);
				ui_text("left: ");
			ui_pop();
			ui_split_right(60);
				ui_align(0, 0.5);
				ui_textnumber(left, "%i");
			ui_pop();
			ui_padright();
			left = control_hslider(left, 0, 50, 0);
			left = floor(left + 0.5);
			ui_click() && ui_clickcount() == 2 ? left = 10;
		ui_split_next();
			ui_pad(0, -0.5);
			ui_split_leftratio(0.4);
				ui_align(1, 0.5);
				ui_text("top: ");
			ui_pop();
			ui_split_right(60);
				ui_align(0, 0.5);
				ui_textnumber(top, "%i");
			ui_pop();
			ui_padright();
			top = control_hslider(top, 0, 50, 0);
			top = floor(top + 0.5);
			ui_click() && ui_clickcount() == 2 ? top = 10;
		ui_split_next();
			ui_pad(0, -0.5);
			ui_split_leftratio(0.4);
				ui_align(1, 0.5);
				ui_text("right: ");
			ui_pop();
			ui_split_right(60);
				ui_align(0, 0.5);
				ui_textnumber(right, "%i");
			ui_pop();
			ui_padright();
			right = control_hslider(right, 0, 50, 0);
			right = floor(right + 0.5);
			ui_click() && ui_clickcount() == 2 ? right = 10;
		ui_split_next();
			ui_pad(0, -0.5);
			ui_split_leftratio(0.4);
				ui_align(1, 0.5);
				ui_text("bottom: ");
			ui_pop();
			ui_split_right(60);
				ui_align(0, 0.5);
				ui_textnumber(bottom, "%i");
			ui_pop();
			ui_padright();
			bottom = control_hslider(bottom, 0, 50, 0);
			bottom = floor(bottom + 0.5);
			ui_click() && ui_clickcount() == 2 ? bottom = 10;
		ui_pop();
	ui_pop();
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("ui_border();\n\nui_pad(left, top, right, bottom);\n\nui_border();");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_2_3_1" ? (
	control_navbar("Single-edge padding", "options", "options");
	ui_pad();
	api_print_function_signature("ui_padtop(pixels);");
	api_print_function_signature("ui_padbottom(pixels);");
	api_print_function_signature("ui_padleft(pixels);");
	api_print_function_signature("ui_padright(pixels);");
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("These functions add padding on one edge only.  If the length is 0, the default padding is used."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_rightratio(0.5);
		ui_padleft();
		!page_2_3_1_setup ? (
			left = 10;
			top = 10;
			right = 10;
			bottom = 10;
			page_2_3_1_setup = 1;
		);
		ui_border();
		
		ui_padleft(left);
		ui_padtop(top);
		ui_padright(right);
		ui_padbottom(bottom);
		
		ui_border();
	ui_pop();
	ui_split_bottom(206);
		control_group("parameters");
		ui_split_topratio(1/4);
			ui_pad(0, -0.5);
			ui_split_leftratio(0.4);
				ui_align(1, 0.5);
				ui_text("left: ");
			ui_pop();
			ui_split_right(60);
				ui_align(0, 0.5);
				ui_textnumber(left, "%i");
			ui_pop();
			ui_padright();
			left = control_hslider(left, 0, 50, 0);
			left = floor(left + 0.5);
			ui_click() && ui_clickcount() == 2 ? left = 10;
		ui_split_next();
			ui_pad(0, -0.5);
			ui_split_leftratio(0.4);
				ui_align(1, 0.5);
				ui_text("top: ");
			ui_pop();
			ui_split_right(60);
				ui_align(0, 0.5);
				ui_textnumber(top, "%i");
			ui_pop();
			ui_padright();
			top = control_hslider(top, 0, 50, 0);
			top = floor(top + 0.5);
			ui_click() && ui_clickcount() == 2 ? top = 10;
		ui_split_next();
			ui_pad(0, -0.5);
			ui_split_leftratio(0.4);
				ui_align(1, 0.5);
				ui_text("right: ");
			ui_pop();
			ui_split_right(60);
				ui_align(0, 0.5);
				ui_textnumber(right, "%i");
			ui_pop();
			ui_padright();
			right = control_hslider(right, 0, 50, 0);
			right = floor(right + 0.5);
			ui_click() && ui_clickcount() == 2 ? right = 10;
		ui_split_next();
			ui_pad(0, -0.5);
			ui_split_leftratio(0.4);
				ui_align(1, 0.5);
				ui_text("bottom: ");
			ui_pop();
			ui_split_right(60);
				ui_align(0, 0.5);
				ui_textnumber(bottom, "%i");
			ui_pop();
			ui_padright();
			bottom = control_hslider(bottom, 0, 50, 0);
			bottom = floor(bottom + 0.5);
			ui_click() && ui_clickcount() == 2 ? bottom = 10;
		ui_pop();
	ui_pop();
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("ui_border();\n\nui_padleft(left);\nui_padtop(top);\nui_padright(right);\nui_padbottom(bottom);\n\nui_border();");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_2_3_2" ? (
	control_navbar("Setting/getting the padding", "options", "options");
	ui_pad();
	api_print_function_signature("ui_padding(padding_horizontal, padding_vertical);");
	api_print_function_signature("padding_horizontal = ui_padding_x();");
	api_print_function_signature("padding_vertical = ui_padding_y();");
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("These functions allow you to read or set the default padding.  Different themes have different default padding sizes."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_rightratio(0.5);
		ui_padleft();
		!page_2_3_2_setup ? (
			pad_x = ui_padding_x();
			pad_y = ui_padding_y();
			page_2_3_2_setup = 1;
		);
		ui_border();
		
		ui_padding(pad_x, pad_y);
		ui_pad();
		
		ui_border();
	ui_pop();
	ui_split_bottom(118);
		control_group("parameters");
		ui_split_topratio(1/2);
			ui_pad(0, -0.5);
			ui_split_leftratio(0.4);
				ui_align(1, 0.5);
				ui_text("pad_x: ");
			ui_pop();
			ui_split_right(60);
				ui_align(0, 0.5);
				ui_textnumber(pad_x, "%i");
			ui_pop();
			ui_padright();
			pad_x = control_hslider(pad_x, 0, 50, 0);
			pad_x = floor(pad_x + 0.5);
		ui_split_next();
			ui_pad(0, -0.5);
			ui_split_leftratio(0.4);
				ui_align(1, 0.5);
				ui_text("pad_y: ");
			ui_pop();
			ui_split_right(60);
				ui_align(0, 0.5);
				ui_textnumber(pad_y, "%i");
			ui_pop();
			ui_padright();
			pad_y = control_hslider(pad_y, 0, 50, 0);
			pad_y = floor(pad_y + 0.5);
		ui_pop();
	ui_pop();
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("ui_border();\n\nui_padding(pad_x, pad_y);\nui_pad();\n\nui_border();");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_3" ? (
	control_navbar("Drawing state", "options", "options");
	ui_pad();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("ui_color") ? (
				ui_screen_open("page_3_0");
				page_3_0_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("Alignment") ? (
				ui_screen_open("page_3_1");
				page_3_1_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("Fonts") ? (
				ui_screen_open("page_3_2");
				page_3_2_setup = 0;
			);
		ui_pop();
	ui_pop();
) : ui_screen() == "page_3_0" ? (
	control_navbar("ui_color", "options", "options");
	ui_pad();
	api_print_function_signature("ui_color(red, green, blue, alpha);");
	api_print_function_signature("ui_color();");
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("This function sets the current drawing colour.  It uses RGB values in the 0-255 range, and an optional alpha in the 0-1 range.\n\nThese values are translated into the gfx_r/gfx_g/gfx_b/gfx_a variables.  If ui_color() is called with no arguments, these variables are recalculated."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_rightratio(0.5);
		ui_padleft();
		!page_3_0_setup ? (
			red = 192;
			green = 128;
			blue = 64;
			alpha = 1;
			page_3_0_setup = 1;
		);
		ui_split_topratio(0.5);
			ui_color(red, green, blue, alpha);
			ui_fill();
		ui_pop();
		
		// This is not affected
		ui_text("some text");
	ui_pop();
	ui_split_bottom(206);
		control_group("parameters");
		ui_split_topratio(1/4);
			ui_pad(0, -0.5);
			ui_split_leftratio(0.4);
				ui_align(1, 0.5);
				ui_text("red: ");
			ui_pop();
			ui_split_right(60);
				ui_align(0, 0.5);
				ui_textnumber(red, "%i");
			ui_pop();
			ui_padright();
			red = control_hslider(red, 0, 255, 0);
			red = floor(red + 0.5);
			ui_click() && ui_clickcount() == 2 ? red = 192;
		ui_split_next();
			ui_pad(0, -0.5);
			ui_split_leftratio(0.4);
				ui_align(1, 0.5);
				ui_text("green: ");
			ui_pop();
			ui_split_right(60);
				ui_align(0, 0.5);
				ui_textnumber(green, "%i");
			ui_pop();
			ui_padright();
			green = control_hslider(green, 0, 255, 0);
			green = floor(green + 0.5);
			ui_click() && ui_clickcount() == 2 ? green = 128;
		ui_split_next();
			ui_pad(0, -0.5);
			ui_split_leftratio(0.4);
				ui_align(1, 0.5);
				ui_text("blue: ");
			ui_pop();
			ui_split_right(60);
				ui_align(0, 0.5);
				ui_textnumber(blue, "%i");
			ui_pop();
			ui_padright();
			blue = control_hslider(blue, 0, 255, 0);
			blue = floor(blue + 0.5);
			ui_click() && ui_clickcount() == 2 ? blue = 64;
		ui_split_next();
			ui_pad(0, -0.5);
			ui_split_leftratio(0.4);
				ui_align(1, 0.5);
				ui_text("alpha: ");
			ui_pop();
			ui_split_right(60);
				ui_align(0, 0.5);
				ui_textnumber(alpha, "%f");
			ui_pop();
			ui_padright();
			alpha = control_hslider(alpha, 0, 1, 0);
			ui_click() && ui_clickcount() == 2 ? alpha = 1;
		ui_pop();
	ui_pop();
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("ui_split_topratio(0.5);\n\tui_color(red, green, blue, alpha);\n\tui_fill();\nui_pop();\n\n// This is not affected\nui_text(\"some text\");");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_3_1" ? (
	control_navbar("Alignment", "options", "options");
	ui_pad();
	api_print_function_signature("ui_align(horizontal, vertical);");
	api_print_function_signature("horizontal = ui_align_x();");
	api_print_function_signature("vertical = ui_align_y();");
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("These function set and read the current alignment.  They are ratios, so 0 means left/top, and 1 means right/bottom.\n\nIf an out-of-range value is passed to ui_align(), it is ignored.  This means you can set the alignments independently - e.g. ui_align(0, -1) will change the horizontal alignment to hard-left, but leave the vertical alignment unchanged."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_rightratio(0.5);
		ui_padleft();
		!page_3_1_setup ? (
			horizontal = 0.5;
			vertical = 0.5;
			page_3_1_setup = 1;
		);
		ui_align(horizontal, vertical);
		ui_text("aligned text");
	ui_pop();
	ui_split_bottom(118);
		control_group("parameters");
		ui_split_topratio(1/2);
			ui_pad(0, -0.5);
			ui_split_leftratio(0.4);
				ui_align(1, 0.5);
				ui_text("horizontal: ");
			ui_pop();
			ui_split_right(60);
				ui_align(0, 0.5);
				ui_textnumber(horizontal, "%f");
			ui_pop();
			ui_padright();
			horizontal = control_hslider(horizontal, 0, 1, 0);
			ui_click() && ui_clickcount() == 2 ? horizontal = 0.5;
		ui_split_next();
			ui_pad(0, -0.5);
			ui_split_leftratio(0.4);
				ui_align(1, 0.5);
				ui_text("vertical: ");
			ui_pop();
			ui_split_right(60);
				ui_align(0, 0.5);
				ui_textnumber(vertical, "%f");
			ui_pop();
			ui_padright();
			vertical = control_hslider(vertical, 0, 1, 0);
			ui_click() && ui_clickcount() == 2 ? vertical = 0.5;
		ui_pop();
	ui_pop();
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("ui_align(horizontal, vertical);\nui_text(\"aligned text\");");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_3_2" ? (
	control_navbar("Fonts", "options", "options");
	ui_pad();
	ui_split_top(54);
		ui_split_leftratio(0.5);
			api_print_function_signature("ui_font(#face, size, bold, italics);");
			api_print_function_signature("ui_fontface(#face);");
			api_print_function_signature("ui_fontsize(size);");
		ui_split_next();
			api_print_function_signature("ui_fontbold(bold);");
			api_print_function_signature("ui_fontitalic(italics);");
			api_print_function_signature("ui_font();");
		ui_pop();
	ui_pop();
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("Specify the font parameters, individually or all at once.\n\nThe UI library uses font index 16, and configures this accordingly.  ui_font() called with no arguments re-configures this font, in case it has been changed."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_rightratio(0.5);
		ui_padleft();
		!page_3_2_setup ? (
			strcpy(#face, "Comic Sans MS");
			size = 24;
			page_3_2_setup = 1;
		);
		ui_font(#face, size, bold, italics);
		
		ui_text("Hello, world!");
	ui_pop();
	ui_split_bottom(206);
		control_group("parameters");
		ui_split_topratio(1/4);
			ui_pad(0, -0.5);
			ui_split_leftratio(0.4);
				ui_align(1, 0.5);
				ui_text("#face: ");
			ui_pop();
			page_3_2_param0_state = control_textinput(#face, page_3_2_param0_state);
		ui_split_next();
			ui_pad(0, -0.5);
			ui_split_leftratio(0.4);
				ui_align(1, 0.5);
				ui_text("size: ");
			ui_pop();
			ui_split_right(60);
				ui_align(0, 0.5);
				ui_textnumber(size, "%i");
			ui_pop();
			ui_padright();
			size = control_hslider(size, 8, 100, 0);
			size = floor(size + 0.5);
			ui_click() && ui_clickcount() == 2 ? size = 24;
		ui_split_next();
			ui_pad(0, -0.5);
			ui_split_leftratio(0.4);
				ui_align(1, 0.5);
				ui_text("bold: ");
			ui_pop();
			ui_split_left(60);
				bold = control_switch(bold);
			ui_pop();
			ui_padright();
			ui_align(1, 0.5);
			ui_text(bold ? "on" : "off");
		ui_split_next();
			ui_pad(0, -0.5);
			ui_split_leftratio(0.4);
				ui_align(1, 0.5);
				ui_text("italics: ");
			ui_pop();
			ui_split_left(60);
				italics = control_switch(italics);
			ui_pop();
			ui_padright();
			ui_align(1, 0.5);
			ui_text(italics ? "on" : "off");
		ui_pop();
	ui_pop();
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("ui_font(#face, size, bold, italics);\n\nui_text(\"Hello, world!\");");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_4" ? (
	control_navbar("Drawing", "options", "options");
	ui_pad();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("Although the default colours vary, these drawing functions are theme-independent."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("ui_fill") ? (
				ui_screen_open("page_4_0");
				page_4_0_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("ui_border() and others") ? (
				ui_screen_open("page_4_1");
				page_4_1_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("Plotting graphs") ? (
				ui_screen_open("page_4_2");
				page_4_2_setup = 0;
			);
		ui_pop();
	ui_pop();
) : ui_screen() == "page_4_0" ? (
	control_navbar("ui_fill", "options", "options");
	ui_pad();
	api_print_function_signature("ui_fill();");
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("Fills the viewport with the current colour."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_rightratio(0.5);
		ui_padleft();
		ui_fill();
	ui_pop();
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("ui_fill();");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_4_1" ? (
	control_navbar("ui_border() and others", "options", "options");
	ui_pad();
	ui_split_top(54);
		ui_split_leftratio(0.5);
			api_print_function_signature("ui_border();");
			api_print_function_signature("ui_border_top();");
			api_print_function_signature("ui_border_bottom();");
		ui_split_next();
			api_print_function_signature("ui_border_left();");
			api_print_function_signature("ui_border_right();");
		ui_pop();
	ui_pop();
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("Draws a border in the current colour."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_rightratio(0.5);
		ui_padleft();
		ui_border();
	ui_pop();
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("ui_border();");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_4_2" ? (
	control_navbar("Plotting graphs", "options", "options");
	ui_pad();
	api_print_function_signature("ui_graph(buffer, length, min_y, max_y);");
	api_print_function_signature("ui_graph_step(buffer, count, step, min_y, max_y);");
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("Plots a graph from a buffer.  If min_y and max_y are the same, the graph is centered around that value, and auto-scaled to fit the data."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_rightratio(0.5);
		ui_padleft();
		!page_4_2_setup ? (
			min_y = -1;
			max_y = 1;
			page_4_2_setup = 1;
		);
		i = 0;
		while (i < api_buffer_length) (
			api_buffer[i] = sin((i/api_buffer_length*1.7 + time_precise()*0.3)*2*$pi);
			i += 1
		);
		
		ui_graph(api_buffer, api_buffer_length, min_y, max_y);
		
		ui_color(0, 192, 255);
		ui_graph_step(api_buffer, api_buffer_length>>6, 64, min_y, max_y);
	ui_pop();
	ui_split_bottom(118);
		control_group("parameters");
		ui_split_topratio(1/2);
			ui_pad(0, -0.5);
			ui_split_leftratio(0.4);
				ui_align(1, 0.5);
				ui_text("min_y: ");
			ui_pop();
			ui_split_right(60);
				ui_align(0, 0.5);
				ui_textnumber(min_y, "%f");
			ui_pop();
			ui_padright();
			min_y = control_hslider(min_y, -2, 0, 0);
			ui_click() && ui_clickcount() == 2 ? min_y = -1;
		ui_split_next();
			ui_pad(0, -0.5);
			ui_split_leftratio(0.4);
				ui_align(1, 0.5);
				ui_text("max_y: ");
			ui_pop();
			ui_split_right(60);
				ui_align(0, 0.5);
				ui_textnumber(max_y, "%f");
			ui_pop();
			ui_padright();
			max_y = control_hslider(max_y, 0, 2, 0);
			ui_click() && ui_clickcount() == 2 ? max_y = 1;
		ui_pop();
	ui_pop();
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("ui_graph(buffer, 1024, min_y, max_y);\n\nui_color(0, 192, 255);\nui_graph_step(buffer, 16, 64, min_y, max_y);\n\n");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_5" ? (
	control_navbar("Text", "options", "options");
	ui_pad();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("Although the default fonts/etc. vary, these functions are theme-independent."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("ui_text") ? (
				ui_screen_open("page_5_0");
				page_5_0_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("ui_wraptext / ui_wraptext_height") ? (
				ui_screen_open("page_5_1");
				page_5_1_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("ui_texth") ? (
				ui_screen_open("page_5_2");
				page_5_2_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("ui_text_width / ui_text_height") ? (
				ui_screen_open("page_5_3");
				page_5_3_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("ui_textnumber") ? (
				ui_screen_open("page_5_4");
				page_5_4_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("ui_parsenumber") ? (
				ui_screen_open("page_5_5");
				page_5_5_setup = 0;
			);
		ui_pop();
	ui_pop();
) : ui_screen() == "page_5_0" ? (
	control_navbar("ui_text", "options", "options");
	ui_pad();
	api_print_function_signature("ui_text(#text);");
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("Draws text into the viewport, using the current alignment.\n\nText not wrapped, but is shrunk to fit the space if necessary."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_rightratio(0.5);
		ui_padleft();
		!page_5_0_setup ? (
			strcpy(#text, "here is some text");
			page_5_0_setup = 1;
		);
		ui_text(#text);
	ui_pop();
	ui_split_bottom(74);
		control_group("parameters");
		ui_split_topratio(1/1);
			ui_pad(0, -0.5);
			ui_split_leftratio(0.4);
				ui_align(1, 0.5);
				ui_text("#text: ");
			ui_pop();
			page_5_0_param0_state = control_textinput(#text, page_5_0_param0_state);
		ui_pop();
	ui_pop();
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("ui_text(#text);");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_5_1" ? (
	control_navbar("ui_wraptext / ui_wraptext_height", "options", "options");
	ui_pad();
	api_print_function_signature("height = ui_wraptext(#text);");
	api_print_function_signature("height = ui_wraptext_height(#text);");
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("ui_wraptext() draws text into the viewport, using the current alignment.  Text wraps, but is not shrunk to fit, so may overflow.\n\nui_wraptext_height() measures the text without actually drawing it (which is useful for positioning things around wrapped text)."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_rightratio(0.5);
		ui_padleft();
		!page_5_1_setup ? (
			page_5_1_setup = 1;
		);
		height = ui_wraptext("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum molestie facilisis enim at imperdiet. Cras molestie tristique purus ut cursus. Duis sagittis nisl id urna luctus posuere. Duis vel lorem aliquam, condimentum tellus quis, placerat risus. Duis auctor libero ante, nec bibendum ante volutpat ac.");
	ui_pop();
	ui_split_bottom(44);
		ui_pad(-1, 0);
		ui_split_leftratio(0.4);
			ui_align(1, 0.5);
			ui_text("height: ");
		ui_pop();
		
		ui_pad(0, -0.5);
		control_background_inset();
		ui_push();
			ui_padleft();
			ui_align(0, 0.5);
			ui_textnumber(height, "%i");
		ui_pop();
		control_finish_inset();
	ui_pop();
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("height = ui_wraptext(#longtext);");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_5_2" ? (
	control_navbar("ui_texth", "options", "options");
	ui_pad();
	api_print_function_signature("line_height = ui_texth();");
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("Gets the current height of a single line, resetting the gfx_* font parameters if necessary."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_rightratio(0.5);
		ui_padleft();
		!page_5_2_setup ? (
			page_5_2_setup = 1;
		);
		line_height = ui_texth();
	ui_pop();
	ui_split_bottom(44);
		ui_pad(-1, 0);
		ui_split_leftratio(0.4);
			ui_align(1, 0.5);
			ui_text("line_height: ");
		ui_pop();
		
		ui_pad(0, -0.5);
		control_background_inset();
		ui_push();
			ui_padleft();
			ui_align(0, 0.5);
			ui_textnumber(line_height, "%i");
		ui_pop();
		control_finish_inset();
	ui_pop();
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("line_height = ui_texth();");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_5_3" ? (
	control_navbar("ui_text_width / ui_text_height", "options", "options");
	ui_pad();
	api_print_function_signature("text_width = ui_text_width(#text);");
	api_print_function_signature("text_height = ui_text_height(#text);");
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("Measures the width/height of text, resetting the gfx_* font parameters if necessary.\n\nThis will return a non-zero height even for empty strings."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_rightratio(0.5);
		ui_padleft();
		!page_5_3_setup ? (
			strcpy(#text, "input text");
			page_5_3_setup = 1;
		);
		text_width = ui_text_width(#text);
		text_height = ui_text_height(#text);
	ui_pop();
	ui_split_bottom(44);
		ui_pad(-1, 0);
		ui_split_leftratio(0.4);
			ui_align(1, 0.5);
			ui_text("text_height: ");
		ui_pop();
		
		ui_pad(0, -0.5);
		control_background_inset();
		ui_push();
			ui_padleft();
			ui_align(0, 0.5);
			ui_textnumber(text_height, "%i");
		ui_pop();
		control_finish_inset();
	ui_pop();
	ui_split_bottom(44);
		ui_pad(-1, 0);
		ui_split_leftratio(0.4);
			ui_align(1, 0.5);
			ui_text("text_width: ");
		ui_pop();
		
		ui_pad(0, -0.5);
		control_background_inset();
		ui_push();
			ui_padleft();
			ui_align(0, 0.5);
			ui_textnumber(text_width, "%i");
		ui_pop();
		control_finish_inset();
	ui_pop();
	ui_split_bottom(74);
		control_group("parameters");
		ui_split_topratio(1/1);
			ui_pad(0, -0.5);
			ui_split_leftratio(0.4);
				ui_align(1, 0.5);
				ui_text("#text: ");
			ui_pop();
			page_5_3_param0_state = control_textinput(#text, page_5_3_param0_state);
		ui_pop();
	ui_pop();
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("text_width = ui_text_width(#text);\ntext_height = ui_text_height(#text);");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_5_4" ? (
	control_navbar("ui_textnumber", "options", "options");
	ui_pad();
	api_print_function_signature("ui_textnumber(number, #format=\"%f\");");
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("Formats a number using sprintf() formats, and draws it using ui_text()."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_rightratio(0.5);
		ui_padleft();
		!page_5_4_setup ? (
			strcpy(#format, "%.2f");
			page_5_4_setup = 1;
		);
		ui_textnumber(number, #format);
	ui_pop();
	ui_split_bottom(118);
		control_group("parameters");
		ui_split_topratio(1/2);
			ui_pad(0, -0.5);
			ui_split_leftratio(0.4);
				ui_align(1, 0.5);
				ui_text("number: ");
			ui_pop();
			ui_split_right(60);
				ui_align(0, 0.5);
				ui_textnumber(number, "%f");
			ui_pop();
			ui_padright();
			number = control_hslider(number, 0, 1, 0);
		ui_split_next();
			ui_pad(0, -0.5);
			ui_split_leftratio(0.4);
				ui_align(1, 0.5);
				ui_text("#format: ");
			ui_pop();
			page_5_4_param1_state = control_textinput(#format, page_5_4_param1_state);
		ui_pop();
	ui_pop();
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("ui_textnumber(number, #format);");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_5_5" ? (
	control_navbar("ui_parsenumber", "options", "options");
	ui_pad();
	api_print_function_signature("number = ui_parsenumber(#number_string, default=0);");
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("This function parses string into a number.\n\nIt stops at the first invalid character, returning the default value if it did not find a valid number first.  Whitespace is ignored."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_rightratio(0.5);
		ui_padleft();
		!page_5_5_setup ? (
			strcpy(#number_string, "65.2");
			default = 0;
			page_5_5_setup = 1;
		);
		number = ui_parsenumber(#number_string, default);
	ui_pop();
	ui_split_bottom(44);
		ui_pad(-1, 0);
		ui_split_leftratio(0.4);
			ui_align(1, 0.5);
			ui_text("number: ");
		ui_pop();
		
		ui_pad(0, -0.5);
		control_background_inset();
		ui_push();
			ui_padleft();
			ui_align(0, 0.5);
			ui_textnumber(number, "%f");
		ui_pop();
		control_finish_inset();
	ui_pop();
	ui_split_bottom(118);
		control_group("parameters");
		ui_split_topratio(1/2);
			ui_pad(0, -0.5);
			ui_split_leftratio(0.4);
				ui_align(1, 0.5);
				ui_text("#number_string: ");
			ui_pop();
			page_5_5_param0_state = control_textinput(#number_string, page_5_5_param0_state);
		ui_split_next();
			ui_pad(0, -0.5);
			ui_split_leftratio(0.4);
				ui_align(1, 0.5);
				ui_text("default: ");
			ui_pop();
			ui_split_right(60);
				ui_align(0, 0.5);
				ui_textnumber(default, "%f");
			ui_pop();
			ui_padright();
			default = control_hslider(default, 0, 1, 0);
			ui_click() && ui_clickcount() == 2 ? default = 0;
		ui_pop();
	ui_pop();
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("number = ui_parsenumber(#number_string, default);");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_6" ? (
	control_navbar("User input", "options", "options");
	ui_pad();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("Mouse") ? (
				ui_screen_open("page_6_0");
				page_6_0_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("Keyboard") ? (
				ui_screen_open("page_6_1");
				page_6_1_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("ui_interacted") ? (
				ui_screen_open("page_6_2");
				page_6_2_setup = 0;
			);
		ui_pop();
	ui_pop();
) : ui_screen() == "page_6_0" ? (
	control_navbar("Mouse", "options", "options");
	ui_pad();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("For raw mouse state, you can still use mouse_x, mouse_y and mouse_cap.  These functions deal with more complex interactions, like dragging and hovering.\n\nFor any function that takes a \"button index\" argument, it uses the standard JSFX numbers of 1=left, 2=right, 64=middle.  Omitting this argument defaults to 1 (left click)."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("Mouse position") ? (
				ui_screen_open("page_6_0_0");
				page_6_0_0_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("ui_click / ui_clickcount") ? (
				ui_screen_open("page_6_0_1");
				page_6_0_1_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("Mouse movement") ? (
				ui_screen_open("page_6_0_2");
				page_6_0_2_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("Mouse-down event") ? (
				ui_screen_open("page_6_0_3");
				page_6_0_3_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("Mouse-up event") ? (
				ui_screen_open("page_6_0_4");
				page_6_0_4_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("Mouse dragging") ? (
				ui_screen_open("page_6_0_5");
				page_6_0_5_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("Scroll wheel") ? (
				ui_screen_open("page_6_0_6");
				page_6_0_6_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("ui_hover") ? (
				ui_screen_open("page_6_0_7");
				page_6_0_7_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("ui_press") ? (
				ui_screen_open("page_6_0_8");
				page_6_0_8_setup = 0;
			);
		ui_pop();
	ui_pop();
	ui_split_toptext(-1);
		ui_push_widthratio(0.5);
			control_button("Clear the mouse status") ? (
				ui_screen_open("page_6_0_9");
				page_6_0_9_setup = 0;
			);
		ui_pop();
	ui_pop();
) : ui_screen() == "page_6_0_0" ? (
	control_navbar("Mouse position", "options", "options");
	ui_pad();
	api_print_function_signature("relative_x = ui_mouse_x();");
	api_print_function_signature("relative_x = ui_mouse_xratio();");
	api_print_function_signature("relative_x = ui_mouse_y();");
	api_print_function_signature("relative_y = ui_mouse_yratio();");
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("These functions return the mouse position relative to the current viewport, either in absolute pixels or as a ratio."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_rightratio(0.5);
		ui_padleft();
		!page_6_0_0_setup ? (
			page_6_0_0_setup = 1;
		);
		ui_border();
		
		x = ui_mouse_x();
		y = ui_mouse_y();
		x_ratio = ui_mouse_xratio();
		y_ratio = ui_mouse_yratio();
	ui_pop();
	ui_split_bottom(44);
		ui_pad(-1, 0);
		ui_split_leftratio(0.4);
			ui_align(1, 0.5);
			ui_text("y_ratio: ");
		ui_pop();
		
		ui_pad(0, -0.5);
		control_background_inset();
		ui_push();
			ui_padleft();
			ui_align(0, 0.5);
			ui_textnumber(y_ratio, "%f");
		ui_pop();
		control_finish_inset();
	ui_pop();
	ui_split_bottom(44);
		ui_pad(-1, 0);
		ui_split_leftratio(0.4);
			ui_align(1, 0.5);
			ui_text("y: ");
		ui_pop();
		
		ui_pad(0, -0.5);
		control_background_inset();
		ui_push();
			ui_padleft();
			ui_align(0, 0.5);
			ui_textnumber(y, "%i");
		ui_pop();
		control_finish_inset();
	ui_pop();
	ui_split_bottom(44);
		ui_pad(-1, 0);
		ui_split_leftratio(0.4);
			ui_align(1, 0.5);
			ui_text("x_ratio: ");
		ui_pop();
		
		ui_pad(0, -0.5);
		control_background_inset();
		ui_push();
			ui_padleft();
			ui_align(0, 0.5);
			ui_textnumber(x_ratio, "%f");
		ui_pop();
		control_finish_inset();
	ui_pop();
	ui_split_bottom(44);
		ui_pad(-1, 0);
		ui_split_leftratio(0.4);
			ui_align(1, 0.5);
			ui_text("x: ");
		ui_pop();
		
		ui_pad(0, -0.5);
		control_background_inset();
		ui_push();
			ui_padleft();
			ui_align(0, 0.5);
			ui_textnumber(x, "%i");
		ui_pop();
		control_finish_inset();
	ui_pop();
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("x = ui_mouse_x();\ny = ui_mouse_y();\nx_ratio = ui_mouse_xratio();\ny_ratio = ui_mouse_yratio();");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_6_0_1" ? (
	control_navbar("ui_click / ui_clickcount", "options", "options");
	ui_pad();
	api_print_function_signature("pressed = ui_click(button=1);");
	api_print_function_signature("count = ui_clickcount(button=1);");
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("ui_click() returns whether the user clicked within this viewport, and released within this viewport.  If the mouse moved outside the viewport within this time and then back in again, it still counts as a \"click\".  It returns 0, or the duration of the click.\n\nui_clickcount() can be used to detect double-clicks/triple-clicks/etc."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_rightratio(0.5);
		ui_padleft();
		!page_6_0_1_setup ? (
			page_6_0_1_setup = 1;
		);
		ui_click() ? (
			ui_fill();
		
			last_clickcount = ui_clickcount();
		);
	ui_pop();
	ui_split_bottom(44);
		ui_pad(-1, 0);
		ui_split_leftratio(0.4);
			ui_align(1, 0.5);
			ui_text("last_clickcount: ");
		ui_pop();
		
		ui_pad(0, -0.5);
		control_background_inset();
		ui_push();
			ui_padleft();
			ui_align(0, 0.5);
			ui_textnumber(last_clickcount, "%i");
		ui_pop();
		control_finish_inset();
	ui_pop();
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("ui_click() ? (\n\tui_fill();\n\n\tlast_clickcount = ui_clickcount();\n);");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_6_0_2" ? (
	control_navbar("Mouse movement", "options", "options");
	ui_pad();
	api_print_function_signature("dx = ui_mouse_dx();");
	api_print_function_signature("dy = ui_mouse_dy();");
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("Returns the mouse movement since the last frame."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_rightratio(0.5);
		ui_padleft();
		!page_6_0_2_setup ? (
			page_6_0_2_setup = 1;
		);
		dx = ui_mouse_dx();
		dy = ui_mouse_dy();
		
		// Draw mouse movement
		mx = mouse_x;
		my = mouse_y;
		gfx_line(mx, my, mx - dx, my - dy);
	ui_pop();
	ui_split_bottom(44);
		ui_pad(-1, 0);
		ui_split_leftratio(0.4);
			ui_align(1, 0.5);
			ui_text("dy: ");
		ui_pop();
		
		ui_pad(0, -0.5);
		control_background_inset();
		ui_push();
			ui_padleft();
			ui_align(0, 0.5);
			ui_textnumber(dy, "%i");
		ui_pop();
		control_finish_inset();
	ui_pop();
	ui_split_bottom(44);
		ui_pad(-1, 0);
		ui_split_leftratio(0.4);
			ui_align(1, 0.5);
			ui_text("dx: ");
		ui_pop();
		
		ui_pad(0, -0.5);
		control_background_inset();
		ui_push();
			ui_padleft();
			ui_align(0, 0.5);
			ui_textnumber(dx, "%i");
		ui_pop();
		control_finish_inset();
	ui_pop();
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("dx = ui_mouse_dx();\ndy = ui_mouse_dy();\n\n// Draw mouse movement\nmx = mouse_x;\nmy = mouse_y;\ngfx_line(mx, my, mx - dx, my - dy);");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_6_0_3" ? (
	control_navbar("Mouse-down event", "options", "options");
	ui_pad();
	api_print_function_signature("event = ui_mouse_down(button=1);");
	api_print_function_signature("event = ui_mouse_down_outside(button=1);");
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("Returns whether the mouse button has just been pressed, either inside the current viewport (ui_mouse_down) or outside (ui_mouse_down_outside)."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_rightratio(0.5);
		ui_padleft();
		!page_6_0_3_setup ? (
			page_6_0_3_setup = 1;
		);
		event_counter1 += ui_mouse_down(1);
		event_counter2 += ui_mouse_down(2);
		event_counter64 += ui_mouse_down(64);
	ui_pop();
	ui_split_bottom(44);
		ui_pad(-1, 0);
		ui_split_leftratio(0.4);
			ui_align(1, 0.5);
			ui_text("event_counter64: ");
		ui_pop();
		
		ui_pad(0, -0.5);
		control_background_inset();
		ui_push();
			ui_padleft();
			ui_align(0, 0.5);
			ui_textnumber(event_counter64, "%i");
		ui_pop();
		control_finish_inset();
	ui_pop();
	ui_split_bottom(44);
		ui_pad(-1, 0);
		ui_split_leftratio(0.4);
			ui_align(1, 0.5);
			ui_text("event_counter2: ");
		ui_pop();
		
		ui_pad(0, -0.5);
		control_background_inset();
		ui_push();
			ui_padleft();
			ui_align(0, 0.5);
			ui_textnumber(event_counter2, "%i");
		ui_pop();
		control_finish_inset();
	ui_pop();
	ui_split_bottom(44);
		ui_pad(-1, 0);
		ui_split_leftratio(0.4);
			ui_align(1, 0.5);
			ui_text("event_counter1: ");
		ui_pop();
		
		ui_pad(0, -0.5);
		control_background_inset();
		ui_push();
			ui_padleft();
			ui_align(0, 0.5);
			ui_textnumber(event_counter1, "%i");
		ui_pop();
		control_finish_inset();
	ui_pop();
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("event_counter1 += ui_mouse_down(1);\nevent_counter2 += ui_mouse_down(2);\nevent_counter64 += ui_mouse_down(64);");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_6_0_4" ? (
	control_navbar("Mouse-up event", "options", "options");
	ui_pad();
	api_print_function_signature("event = ui_mouse_up(button=1);");
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("Returns whether the mouse button has just been released, while the mouse is inside the current viewport."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_rightratio(0.5);
		ui_padleft();
		!page_6_0_4_setup ? (
			page_6_0_4_setup = 1;
		);
		event_counter1 += ui_mouse_up(1);
		event_counter2 += ui_mouse_up(2);
		event_counter64 += ui_mouse_up(64);
	ui_pop();
	ui_split_bottom(44);
		ui_pad(-1, 0);
		ui_split_leftratio(0.4);
			ui_align(1, 0.5);
			ui_text("event_counter64: ");
		ui_pop();
		
		ui_pad(0, -0.5);
		control_background_inset();
		ui_push();
			ui_padleft();
			ui_align(0, 0.5);
			ui_textnumber(event_counter64, "%i");
		ui_pop();
		control_finish_inset();
	ui_pop();
	ui_split_bottom(44);
		ui_pad(-1, 0);
		ui_split_leftratio(0.4);
			ui_align(1, 0.5);
			ui_text("event_counter2: ");
		ui_pop();
		
		ui_pad(0, -0.5);
		control_background_inset();
		ui_push();
			ui_padleft();
			ui_align(0, 0.5);
			ui_textnumber(event_counter2, "%i");
		ui_pop();
		control_finish_inset();
	ui_pop();
	ui_split_bottom(44);
		ui_pad(-1, 0);
		ui_split_leftratio(0.4);
			ui_align(1, 0.5);
			ui_text("event_counter1: ");
		ui_pop();
		
		ui_pad(0, -0.5);
		control_background_inset();
		ui_push();
			ui_padleft();
			ui_align(0, 0.5);
			ui_textnumber(event_counter1, "%i");
		ui_pop();
		control_finish_inset();
	ui_pop();
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("event_counter1 += ui_mouse_up(1);\nevent_counter2 += ui_mouse_up(2);\nevent_counter64 += ui_mouse_up(64);");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_6_0_5" ? (
	control_navbar("Mouse dragging", "options", "options");
	ui_pad();
	api_print_function_signature("drag_time = ui_drag(button=1);");
	api_print_function_signature("drag_x = ui_drag_x(button=1);");
	api_print_function_signature("drag_y = ui_drag_y(button=1);");
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("Returns whether the current viewport is currently being dragged or held-down (mouse-down within the viewport, then moved or held for a period of time).\n\nui_drag() returns either 0, or the time since mouse-down."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_rightratio(0.5);
		ui_padleft();
		!page_6_0_5_setup ? (
			page_6_0_5_setup = 1;
		);
		ui_border();
		drag_time = ui_drag();
		drag_x = ui_drag_x();
		drag_y = ui_drag_y();
	ui_pop();
	ui_split_bottom(44);
		ui_pad(-1, 0);
		ui_split_leftratio(0.4);
			ui_align(1, 0.5);
			ui_text("drag_y: ");
		ui_pop();
		
		ui_pad(0, -0.5);
		control_background_inset();
		ui_push();
			ui_padleft();
			ui_align(0, 0.5);
			ui_textnumber(drag_y, "%i");
		ui_pop();
		control_finish_inset();
	ui_pop();
	ui_split_bottom(44);
		ui_pad(-1, 0);
		ui_split_leftratio(0.4);
			ui_align(1, 0.5);
			ui_text("drag_x: ");
		ui_pop();
		
		ui_pad(0, -0.5);
		control_background_inset();
		ui_push();
			ui_padleft();
			ui_align(0, 0.5);
			ui_textnumber(drag_x, "%i");
		ui_pop();
		control_finish_inset();
	ui_pop();
	ui_split_bottom(44);
		ui_pad(-1, 0);
		ui_split_leftratio(0.4);
			ui_align(1, 0.5);
			ui_text("drag_time: ");
		ui_pop();
		
		ui_pad(0, -0.5);
		control_background_inset();
		ui_push();
			ui_padleft();
			ui_align(0, 0.5);
			ui_textnumber(drag_time, "%f");
		ui_pop();
		control_finish_inset();
	ui_pop();
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("drag_time = ui_drag();\ndrag_x = ui_drag_x();\ndrag_y = ui_drag_y();");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_6_0_6" ? (
	control_navbar("Scroll wheel", "options", "options");
	ui_pad();
	api_print_function_signature("dx = ui_scroll_x();");
	api_print_function_signature("dy = ui_scroll_y();");
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("Returns the scroll-wheel movement since the last frame."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_rightratio(0.5);
		ui_padleft();
		!page_6_0_6_setup ? (
			page_6_0_6_setup = 1;
		);
		dx = ui_scroll_x();
		dy = ui_scroll_y();
	ui_pop();
	ui_split_bottom(44);
		ui_pad(-1, 0);
		ui_split_leftratio(0.4);
			ui_align(1, 0.5);
			ui_text("dy: ");
		ui_pop();
		
		ui_pad(0, -0.5);
		control_background_inset();
		ui_push();
			ui_padleft();
			ui_align(0, 0.5);
			ui_textnumber(dy, "%i");
		ui_pop();
		control_finish_inset();
	ui_pop();
	ui_split_bottom(44);
		ui_pad(-1, 0);
		ui_split_leftratio(0.4);
			ui_align(1, 0.5);
			ui_text("dx: ");
		ui_pop();
		
		ui_pad(0, -0.5);
		control_background_inset();
		ui_push();
			ui_padleft();
			ui_align(0, 0.5);
			ui_textnumber(dx, "%i");
		ui_pop();
		control_finish_inset();
	ui_pop();
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("dx = ui_scroll_x();\ndy = ui_scroll_y();");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_6_0_7" ? (
	control_navbar("ui_hover", "options", "options");
	ui_pad();
	api_print_function_signature("hover = ui_hover();");
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("Returns whether the mouse position is inside the current viewport."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_rightratio(0.5);
		ui_padleft();
		!page_6_0_7_setup ? (
			page_6_0_7_setup = 1;
		);
		hover = ui_hover();
		
		hover ? ui_fill();
	ui_pop();
	ui_split_bottom(44);
		ui_pad(-1, 0);
		ui_split_leftratio(0.4);
			ui_align(1, 0.5);
			ui_text("hover: ");
		ui_pop();
		
		ui_pad(0, -0.5);
		control_background_inset();
		ui_push();
			ui_padleft();
			ui_align(0, 0.5);
			ui_textnumber(hover, "%f");
		ui_pop();
		control_finish_inset();
	ui_pop();
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("hover = ui_hover();\n\nhover ? ui_fill();");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_6_0_8" ? (
	control_navbar("ui_press", "options", "options");
	ui_pad();
	api_print_function_signature("pressed = ui_press(button=1);");
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("Whether the user originally clicked within the viewport, and is currently hovering over it with the mouse-button pressed down.\n\nReturns either 0, or the time since the original press.\n\nIf the user clicks and drags away from the viewport, then back into it, that still counts as \"pressing\"."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_rightratio(0.5);
		ui_padleft();
		!page_6_0_8_setup ? (
			page_6_0_8_setup = 1;
		);
		pressed = ui_press();
		
		pressed ? ui_fill();
	ui_pop();
	ui_split_bottom(44);
		ui_pad(-1, 0);
		ui_split_leftratio(0.4);
			ui_align(1, 0.5);
			ui_text("pressed: ");
		ui_pop();
		
		ui_pad(0, -0.5);
		control_background_inset();
		ui_push();
			ui_padleft();
			ui_align(0, 0.5);
			ui_textnumber(pressed, "%f");
		ui_pop();
		control_finish_inset();
	ui_pop();
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("pressed = ui_press();\n\npressed ? ui_fill();");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_6_0_9" ? (
	control_navbar("Clear the mouse status", "options", "options");
	ui_pad();
	api_print_function_signature("ui_click_clear();");
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("Prevents any later code from registering clicks, drags, and so on.  In essence, it release all currently-held mouse buttons, but without triggering any events.\n\nThis is most useful when what's on the screen is about to change - it is done automatically when opening/closing screens, so that the new page does not register any events it shouldn't.\n\nThis does not affect mouse_cap, only the functions available in this UI library."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_rightratio(0.5);
		ui_padleft();
		ui_click_clear();
	ui_pop();
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("ui_click_clear();");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_6_1" ? (
	control_navbar("Keyboard", "options", "options");
	ui_pad();
	api_print_function_signature("char = ui_key();");
	api_print_function_signature("char = ui_key_printable();");
	api_print_function_signature("char = ui_key_next();");
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("ui_key() returns the char code of the latest unhandled key-press, or 0 if there is none.\n\nui_key() will return the same char code until ui_key_next() is called, or until the next frame (more precisely, the next call to ui_start()).  This lets multiple sections of code \"peek\" at the latest key, and choose whether to ignore it or claim it.\n\nui_key_printable() is similar, but it also returns 0 for non-printable characters.\n\nIf you want to receive the full range of keypresses (including things like space/escape, which normally go to the host), put \"options:want_all_kb\" in the header of your effect."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_rightratio(0.5);
		ui_padleft();
		!page_6_1_setup ? (
			page_6_1_setup = 1;
		);
		char = ui_key();
		
		lastchar = char ? char : lastchar;
	ui_pop();
	ui_split_bottom(44);
		ui_pad(-1, 0);
		ui_split_leftratio(0.4);
			ui_align(1, 0.5);
			ui_text("lastchar: ");
		ui_pop();
		
		ui_pad(0, -0.5);
		control_background_inset();
		ui_push();
			ui_padleft();
			ui_align(0, 0.5);
			ui_textnumber(lastchar, "%i");
		ui_pop();
		control_finish_inset();
	ui_pop();
	ui_split_bottom(44);
		ui_pad(-1, 0);
		ui_split_leftratio(0.4);
			ui_align(1, 0.5);
			ui_text("char: ");
		ui_pop();
		
		ui_pad(0, -0.5);
		control_background_inset();
		ui_push();
			ui_padleft();
			ui_align(0, 0.5);
			ui_textnumber(char, "%i");
		ui_pop();
		control_finish_inset();
	ui_pop();
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("char = ui_key();\n\nlastchar = char ? char : lastchar;");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : ui_screen() == "page_6_2" ? (
	control_navbar("ui_interacted", "options", "options");
	ui_pad();
	api_print_function_signature("interacted = ui_interacted();");
	ui_padtop();
	ui_align(0, 0);
	ui_padtop(ui_wraptext("This function returns whether the user has interacted with this effect since last frame.\n\nInteraction is defined as: pressing/releasing any mouse button or control key, scrolling the mouse wheel, moving the mouse while a button is held down, or pressing a key."));
	ui_padtop(ui_texth());
	ui_align(0.5, 0.5);
	ui_split_rightratio(0.5);
		ui_padleft();
		!page_6_2_setup ? (
			page_6_2_setup = 1;
		);
		interacted = ui_interacted();
	ui_pop();
	ui_split_bottom(44);
		ui_pad(-1, 0);
		ui_split_leftratio(0.4);
			ui_align(1, 0.5);
			ui_text("interacted: ");
		ui_pop();
		
		ui_pad(0, -0.5);
		control_background_inset();
		ui_push();
			ui_padleft();
			ui_align(0, 0.5);
			ui_textnumber(interacted, "%f");
		ui_pop();
		control_finish_inset();
	ui_pop();
	ui_push();
		control_background_technical();
		ui_push();
		ui_pad();
			ui_font("Courier New", 14, 1, 0);
			ui_align(0, 0.5);
			ui_text("interacted = ui_interacted();");
		ui_pop();
		control_finish_technical();
	ui_pop();
) : control_system();

@serialize
file_var(0, api_theme);
